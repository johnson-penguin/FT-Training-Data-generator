- stage: cu_init_success
  type: CU
  symptom: "CU initialization success"
  log_snippet: "Initialization complete without error"
  related_config: []
  notes: |
    The CU started successfully and no issues were detected in the configuration file.
    All required parameters are correctly set.
    No changes are required at this stage.

- stage: du_init_success
  type: DU
  symptom: "DU initialization success"
  log_snippet: "Initialization complete without error"
  related_config: []
  notes: |
    The DU started successfully and no issues were detected in the configuration file.
    All required parameters are correctly set.
    No changes are required at this stage.


- stage: mac_rlc_config
  symptom: "Invalid value for maxMIMO_layers caused assertion failure and forced gNB exit. This was caused by changing the pdsch_AntennaPorts_XP parameter into a negative number"
  log_snippet: "Assertion (config.maxMIMO_layers != 0 && config.maxMIMO_layers <= tot_ant) failed!"
  related_config:
    - pdsch_AntennaPorts_XP

- stage: common_config
  symptom: "invalid pusch_AntennaPorts value; predetermined range is 1-12"
  log_snippet: |
    "Assertion (pusch_AntennaPorts > 0 && pusch_AntennaPorts < 13) failed!"
  related_config:
    - pusch_AntennaPorts

- stage: mac_nr_common
  symptom: "TD index is out of the predetermined value range; must be within the range 0-15"
  log_snippet: |
    "[NR_MAC]   TDA index from DCI 16 exceeds default TDA list array size 16
    Assertion (ld > 2 && ld < 15) failed!"
  related_config:
    - sib1_tda

- stage: phy_init
  symptom: "Physical Cell ID is set to an invalid value, causing assertion failure during SSB scheduling"
  log_snippet: |
    "Assertion (*scc->physCellId < 1008 && *scc->physCellId >=0) failed!
    In schedule_ssb() ../../../openair2/LAYER2/NR_MAC_gNB/gNB_scheduler_bch.c:63
    5G physical cell id out of range: -2"
  related_config:
    - physCellId

- stage: rrc_config
  symptom: "SSB frequency not aligned with the NR synchronization raster"
  log_snippet: |
    [RRC]   absoluteFrequencySSB -630048 corresponds to 4291817056000 Hz

    Assertion ((freq - 24250080000) % 17280000 == 0) failed!
    In check_ssb_raster() ../../../common/utils/nr/nr_common.c:406
    SSB frequency 4291817056000 Hz not on the synchronization raster (24250.08 MHz + N * 17.28 MHz)
  related_config:
    - absoluteFrequencySSB

- stage: band_config
  symptom: "Invalid frequency band; band value does not exist in NR band table"
  log_snippet: |
    [RRC]   DLBand -78

    Assertion (i >= 0 && i < (sizeof(nr_bandtable)/sizeof(*(nr_bandtable)))) failed!
    In get_nr_table_idx() ../../../common/utils/nr/nr_common.c:790
    band is not existing: -78
  related_config:
    - dl_frequencyBand

- stage: phy_config
  symptom: "DL frequency doesn't map to a valid NR band; band 0 is not allowed"
  log_snippet: |
    DL frequency 4291882576000: band 0, UL frequency 4291882576000

    Assertion (current_band != 0) failed!
    In get_band() ../../../common/utils/nr/nr_common.c:478
    Can't find EUTRA band for frequency 4291882576000 and duplex_spacing 0
  related_config:
    - dl_absoluteFrequencyPointA

- stage: rrc_config
  symptom: "SIB1 ASN.1 encoding failed, likely due to invalid carrier configuration"
  log_snippet: |
    [NR_RRC]   SIB1 freq: offsetToPointA 252

    Assertion (enc_rval.encoded > 0 && enc_rval.encoded <= max_buffer_size * 8) failed!
    In encode_SIB1_NR() ../../../openair2/RRC/NR/nr_rrc_config.c:2722
    ASN1 message encoding failed (scs-SpecificCarrierList, 18446744073709551615)!
  related_config:
    - dl_offstToCarrier

- stage: phy_config
  symptom: "Invalid combination of subcarrier spacing and carrier bandwidth; results in undefined bandwidth index"
  log_snippet: |
    [NR_PHY]   Copying 0 blacklisted PRB to L1 context

    Assertion (bw_index >= 0 && bw_index <= (sizeof(bandwidth_index_to_mhz)/sizeof(*(bandwidth_index_to_mhz)))) failed!
    In get_supported_bw_mhz() ../../../common/utils/nr/nr_common.c:428
    Bandwidth index -1 is invalid
  related_config:
    - dl_subcarrierSpacing
    - dl_carrierBandwidth

- stage: rrc_config
  symptom: "ASN.1 encoding of SIB1 failed due to invalid initialDLBWPlocationAndBandwidth value"
  log_snippet: |
    [NR_RRC]   SIB1 freq: offsetToPointA 252

    Assertion (enc_rval.encoded > 0 && enc_rval.encoded <= max_buffer_size * 8) failed!
    In encode_SIB1_NR() ../../../openair2/RRC/NR/nr_rrc_config.c:2722
    ASN1 message encoding failed (INTEGER, 18446744073709551615)!
  related_config:
    - initialDLBWPlocationAndBandwidth

- stage: sib1_encoding
  symptom: "SIB1 ASN.1 encoding failed due to invalid subcarrier spacing configuration"
  log_snippet: |
    [NR_RRC]   SIB1 freq: offsetToPointA -2304

    Assertion (enc_rval.encoded > 0 && enc_rval.encoded <= max_buffer_size * 8) failed!
    In encode_SIB1_NR() ../../../openair2/RRC/NR/nr_rrc_config.c:2722
    ASN1 message encoding failed (INTEGER, 18446744073709551615)!
  related_config:
    - initialDLBWPsubcarrierSpacing

- stage: sib1_encoding
  symptom: "Failed to encode NR_PDCCH_ConfigCommon due to invalid control resource set or search space configuration"
  log_snippet: |
    [NR_RRC]   SIB1 freq: offsetToPointA 252

    Assertion (enc_rval.encoded > 0 && enc_rval.encoded < sizeof(buf)) failed!
    In clone_pdcch_configcommon() ../../../openair2/RRC/NR/nr_rrc_config.c:200
    could not clone NR_PDCCH_ConfigCommon: problem while encoding
  related_config:
    - initialDLBWPcontrolResourceSetZero
    - initialDLBWPsearchSpaceZero



- stage: cu_config_parsing
  symptom: "CU failed to initialize due to a syntax error in the configuration file, preventing the libconfig module from loading."
  log_snippet:
    - "syntax error"
    - "config_libconfig_init returned -1"
    - "config module \"libconfig\" couldn't be loaded"
    - "init aborted, configuration couldn't be performed"
    - "Getting configuration failed"
  related_config:
    - cu configuration file
  notes: |
    1. The configuration file contains a syntax error â€” check for missing semicolons, brackets, or incorrect data types.
    2. `libconfig` uses strict syntax: key-value pairs must end with `;` and sections with `{}` must be properly closed.
    3. Use a config linter or double-check the reported line manually.
    4. Until this is fixed, the CU process will not proceed past configuration loading.

- stage: cu_config_parsing
  symptom: "Unknown or unsupported ciphering algorithm specified in CU config file"
  log_snippet:
    - "unknown ciphering algorithm"
    - "ciphering_algorithms"
  related_config:
    - ciphering_algorithms
  notes: |
    The ciphering_algorithms parameter contains an unsupported value (e.g., "nea4").
    Only use supported values: nea0, nea1, nea2, nea3.
    Remove or correct any unsupported ciphering algorithms to avoid CU startup failure.

- stage: cu_config_parsing
  symptom: "Unknown or unsupported integrity algorithm specified in CU config file"
  log_snippet:
    - "unknown integrity algorithm"
    - "integrity_algorithms"
  related_config:
    - integrity_algorithms
  notes: |
    The integrity_algorithms parameter contains an unsupported value (e.g., "nia8").
    Only use supported values: nia0, nia1, nia2, nia3.
    Remove or correct any unsupported integrity algorithms to avoid CU startup failure.

- stage: cu_init
  symptom: "CU failed to start because local_s_address could not be assigned or bound"
  log_snippet:
    - "failed to bind socket"
    - "Cannot assign requested address"
    - "can't create GTP-U instance"
    - "Assertion (getCxt(instance)->gtpInst > 0) failed!"
    - "Failed to create CU F1-U UDP listener"
    - "Exiting OAI softmodem: _Assert_Exit_"
  related_config:
    - local_s_address
  notes: |
    The configured local_s_address is not available on this machine or is already in use.
    Make sure the IP address exists on the host, is not already in use, and is properly configured in the network interface.
    All related errors above are caused by this root issue.

- stage: cu_config_parsing
  symptom: "CU failed to start due to syntax error or invalid value in configuration file"
  log_snippet:
    - "syntax error"
    - "couldn't be loaded"
    - "not properly initialized"
    - "init aborted"
    - "Getting configuration failed"
    - "config_libconfig_init returned -1"
  related_config:
    - Num_Threads_PUSCH
  notes: |
    This error indicates a syntax issue or invalid value in the CU configuration file.
    Check for missing semicolons, brackets, or unsupported parameter values.
    Ensure all configuration statements are correctly formatted and within allowed ranges.


- stage: du_init
  type: DU
  symptom: "DU failed to start due to mismatch or missing Active_gNBs configuration"
  log_snippet:
    - "no active gNB found/mismatch of gNBs"
    - "read_du_cell_info() Exiting OAI softmodem: _Assert_Exit_"
  related_config:
    - Active_gNBs
    - gNB_name
  notes: |
    This error indicates that the DU configuration's `Active_gNBs` is either missing or does not include the correct `gNB_name`.
    To resolve this issue:
    
    - Ensure that `Active_gNBs` includes a name that **exactly matches** the DU's `gNB_name`. This name is case-sensitive.
    - A mismatch will prevent the DU from establishing a CU connection and result in a softmodem assertion failure.

    - Example fix:
    If the DU config includes:
      ```c
      gNB_name = "gNB-Eurecom-DU";
      ```
    Then you must set:
      ```c
      Active_gNBs = ( "gNB-Eurecom-DU" );
      ```
    This ensures DU registration to itself is correctly resolved during initialization.


- stage: du_f1_setup
  type: DU
  symptom: "F1AP Setup Failure reported by CU, possible configuration mismatch between DU and CU"
  log_snippet:
    - "the CU reported F1AP Setup Failure"
    - "configuration mismatch"
    - "F1AP Setup Failure"
  related_config:
    - plmn_list
    - gNB_DU_id
    - gNB_DU_name
    - TAC
  notes: |
    This error indicates that the CU rejected the F1AP setup request from the DU, likely due to a mismatch in configuration parameters such as PLMN, gNB_DU_id, gNB_DU_name, or TAC.
    Ensure that these parameters are consistent and correctly set in both DU and CU configuration files.
    A mismatch will prevent the DU from establishing an F1 interface with the CU.


- stage: cu_init
  type: CU
  symptom: "Mismatch between Active_gNBs and gNB_name causes invalid RAN context and PLMN mismatch"
  log_snippet:
    - "PLMNs received from CUUP"
    - "did not match with PLMNs in RRC"
    - "Assertion (RC.nb_nr_inst == 1) failed!"
  related_config:
    - Active_gNBs
    - gNB_name
  notes: |
    The Active_gNBs parameter should be a list of gNB names (e.g., Active_gNBs = ("gNB-Eurecom-CU");) that correspond exactly to the gNB_name fields declared in the gNBs section. This matching is case-sensitive and essential for correct initialization.
    If a gNB name listed in Active_gNBs is missing or not defined in the gNBs section, it can result in nb_nr_inst = 0, triggering an assertion failure and causing the CU to initialize incorrectly â€” potentially with an invalid PLMN or zero RRC instances.
    To avoid this error, ensure that:
    Every name in Active_gNBs has a corresponding gNB_name block defined.
    All names match exactly, including case.


- stage: cu_config_parsing
  type: CU
  symptom: "CU failed to start due to syntax error in configuration file"
  log_snippet: "syntax error"
  related_config:
    - Num_Threads_PUSCH
  notes: |
    The value for 'Num_Threads_PUSCH' is not a valid integer.
    Ensure all numeric parameters in the config file are set to valid values.
    Recommended value: 4 or 8. (OAI default value: 4)

- stage: cu_config_parsing
  type: CU
  symptom:  "CU failed to start due to `tr_s_preference` syntax error in configuration file"
  log_snippet: 
    - "tr_s_preference"
  related_config:
    - tr_s_preference
  notes: |
    The configuration contained a self-referencing or undefined enum value (e1),
    which caused a parsing failure. This line should be replaced with a valid string assignment.
    CU/DU format: tr_s_preference = "f1";

    In a typical O-RAN deployment, CU and DU are connected via the F1 interface.
    Therefore, setting tr_s_preference to "f1" is necessary for proper CU/DU communication.

- stage: cu_config_parsing
  type: CU
  symptom: "Invalid or oversized value for 'nr_cellid' caused libconfig parsing failure"
  log_snippet: "syntax error"
  related_config:
    - nr_cellid
  notes: |
    The value assigned to `nr_cellid` must be a valid 36-bit identifier as specified in 3GPP TS 38.413 Â§9.3.1.7.
    Acceptable format includes hexadecimal values up to 0xFFFFFFFFF (9 hex digits), or equivalent decimal values.
    For example: `nr_cellid = 0x1A2B3C4D;`
    Avoid using strings or characters beyond 0â€“9 and Aâ€“F.

- stage: cu_config_parsing
  type: CU
  symptom: "CU failed to start due to `local_s_portc` syntax error in configuration file"
  log_snippet: 
    - "CU failed to start due to `local_s_portc` syntax error in configuration file"
  related_config:
    - local_s_portc
  notes: |
    The configuration file failed to parse due to an invalid numeric value assigned to `local_s_portc`.

    In libconfig format, numeric values must be valid decimal (e.g., 501) or hexadecimal (e.g., 0x1F5).
    Any malformed valuesâ€”such as containing non-hex characters, incorrect prefixes, or trailing charactersâ€”
    will cause the parser to throw a syntax error.

    This parameter sets the SCTP port used by the CU to establish the F1-C interface connection with the DU.
    OpenAirInterface (OAI) recommends using port `501` by default for this purpose.

- stage: cu_config_parsing
  type: CU
  symptom: "CU failed to start due to 'remote_s_portd' syntax error in configuration file"
  log_snippet: 
    - "CU failed to start due to 'remote_s_portd' syntax error in configuration file"
  related_config:
    - remote_s_portd 
  notes: |
    The value for 'remote_s_portd' is not a valid integer.
    Ensure all numeric parameters in the config file are set to valid values.
    Recommended value: 2152. (OAI default value: 2152)

    
- stage: cu_config_parsing
  type: CU
  symptom: "CU failed to start due to `GNB_PORT_FOR_S1U` syntax error in configuration file"
  log_snippet: 
    - "CU failed to start due to `GNB_PORT_FOR_S1U` syntax error in configuration file"
  related_config:
    - GNB_PORT_FOR_S1U 
  notes: |
    The value for 'GNB_PORT_FOR_S1U' is not a valid integer.
    Ensure all numeric parameters in the config file are set to valid values.
    Recommended value: 2152. (OAI default value: 2152)


- stage: cu_config_parsing
  type: CU
  symptom: "CU failed to start due to syntax error at 'local_s_if_name' in configuration file"
  log_snippet: "CU failed to start due to syntax error at 'local_s_if_name' in configuration file"
  related_config:
    - local_s_if_name
  notes: |
    The 'local_s_if_name' parameter likely contains a syntax error. Common issues include:
    - Missing semicolon (`;`) at the end
    - Missing double quotes (`"`) around interface name
    - Wrong indentation or being placed outside of NETWORK_INTERFACES block

    CU and DU on the same machine:
    - local_s_if_name = "lo";
    
    CU and DU on different machines:   
    - Actual NIC name, e.g., `"eno1"`, `"eth0"`, `"ens3"`
    - local_s_if_name = "eno1";
    - local_s_if_name = "eth0";
    - local_s_if_name = "ens3";
    Ensure the interface name is correctly specified and matches the actual network interface on your system.

    This parameter is used to specify the local interface name for CU-DU communication.
    Use "lo" if CU and DU are on the same machine, or a valid NIC like "eno1" if they are on separate hosts.
    default value: "lo"



- stage: du_init
  type: DU
  symptom: "DU failed to start due to missing gNB_ID in configuration file"
  log_snippet:
    - "Assertion (config_isparamset(GNBParamList.paramarray[0], 0)) failed!"
    - "read_du_cell_info() ../../../openair2/GNB_APP/gnb_config.c:1108"
    - "gNB_ID is not defined in configuration file"
    - "read_du_cell_info() Exiting OAI softmodem: _Assert_Exit_"
  related_config:
    - gNB_ID
  notes: |
    The DU configuration file is missing the `gNB_ID` parameter, which is mandatory for proper initialization.
    This value must be defined inside the `gNBs` block to uniquely identify the gNB instance within the DU context. Without it, the function `read_du_cell_info()` will trigger an assertion failure, and the DU will exit immediately.

    - Example correction:
    ```c
    gNBs = (
      {
        gNB_ID = 0xe00;
        gNB_name = "gNB-Eurecom-DU";
        ...
      }
    );
    ```
    The `gNB_ID` should be a valid integer or hexadecimal value (e.g., `1` or `0xe00`), and must be consistent with other DU-related settings.

- stage: du_init
  type: DU
  symptom: "DU failed to start due to missing or invalid gNB_DU_ID in configuration file"
  log_snippet:
    - "Assertion (config_isparamset(GNBParamList.paramarray[0], 27)) failed!"
    - "gNB_DU_ID is not defined in configuration file"
    - "read_du_cell_info() Exiting OAI softmodem: _Assert_Exit_"
  related_config:
    - gNB_DU_ID
  notes: |
    The `gNB_DU_ID` field is missing or incorrectly defined in the DU configuration file.

    This field must be provided as an **integer** inside the `gNBs` block. Quoting it as a string (e.g., `"0xe00"`) or omitting it entirely will result in a softmodem assertion failure during initialization.

    - Correct:
    ```c
    gNB_DU_ID = 0xe00;
    ```

    - Incorrect:
    ```c
    gNB_DU_ID = "0xe00";   // Wrong type: string
    // or missing completely
    ```

    This ID must match the `gNB_ID` defined in the CU configuration. Mismatches can cause F1 registration failure, while missing values cause config load errors.



- stage: du_init
  type: DU
  symptom: "DU failed due to gNB_ID defined as a string instead of integer"
  log_snippet:
    - "config_get() failed: gNB_ID not set or not an integer"
    - "read_du_cell_info() Exiting OAI softmodem: _Assert_Exit_"
  related_config:
    - gNB_ID
  notes: |
    The `gNB_ID` field in the DU configuration must be an unquoted hexadecimal or decimal integer. A string value such as `"0xe00"` will cause DU configuration parsing to fail.

    - Correct:
    ```c
    gNB_ID = 0xe00;
    ```

    - Incorrect:
    ```c
    gNB_ID = "0xe00";
    ```

    This integer should match the `gNB_DU_ID` in the same DU config block, and the `gNB_ID` expected by the CU.



- stage: du_init
  type: DU
  symptom: "DU failed to start because local_n_address could not be assigned or bound"
  log_snippet:
    - "bind: Cannot assign requested address"
    - "failed to bind socket"
    - "can't create GTP-U instance"
    - "Assertion (gtpInst > 0) failed!"
    - "cannot create DU F1-U GTP module"
    - "F1AP_DU_task() Exiting OAI softmodem: _Assert_Exit_"
  related_config:
    - local_n_address
  notes: |
    The configured local_n_address is not available on this machine or is already in use.
    Make sure the IP address exists on the host, is not already in use, and is properly configured in the network interface.
    All related errors above are caused by this root issue.



- stage: du_init
  type: DU
  symptom: "DU failed to start due to missing PLMN configuration"
  log_snippet:
    - "Assertion (PLMNParamList.numelt > 0) failed!"
    - "read_du_cell_info() ../../../openair2/GNB_APP/gnb_config.c:1125"
    - "need to have a PLMN in PLMN section"
    - "read_du_cell_info() Exiting OAI softmodem: _Assert_Exit_"
  related_config:
    - DU.plmn_list
  notes: |
    The DU configuration file is missing a valid `plmn_list` entry in the `gNBs` block.
    This list defines the MCC (Mobile Country Code) and MNC (Mobile Network Code) needed for the DU to operate under a valid PLMN. Without it, the DU cannot construct the cell identity and will assert at startup.
    - Example:
    ```c
    plmn_list = (
      {
        mcc = 001;
        mnc = 01;
        mnc_length = 2;
        snssaiList = ( { sst = 1; } );
      }
    );
    ```

    Make sure this section is defined and includes at least one valid MCC/MNC combination.
    
    LLM should add a properly formatted `plmn_list` block if it is missing or empty.


- stage: du_init
  type: DU
  symptom: "DU failed to start due to invalid mnc_length in plmn_list"
  log_snippet:
    - "config_check_intval: mnc_length: 0 invalid value"
    - "authorized values: 2 3"
    - "config_execcheck: section gNBs.[0].plmn_list.[0] 1 parameters with wrong value"
    - "config_execcheck() Exiting OAI softmodem: exit_fun"
  related_config:
    - DU.plmn_list.mnc_length
  notes: |
    The parameter `mnc_length` in the `plmn_list` section must be set to either `2` or `3`.

    A value of `0` is invalid and will cause the configuration checker to fail during DU initialization.

    - Example correction:
    ```c
    plmn_list = (
      {
        mcc = 001;
        mnc = 01;
        mnc_length = 2;
        snssaiList = ( { sst = 1; } );
      }
    );
    ```

    Ensure the `mnc_length` value matches the actual digit length of the MNC:
    - `01` â†’ `mnc_length = 2`
    - `001` â†’ `mnc_length = 3`

    LLM should verify that `mnc_length` is either 2 or 3 based on the MNC format, and correct it if the value is missing or invalid.


- stage: du_init
  type: DU
  symptom: "DU failed to start due to invalid nr_cellid exceeding 36-bit range"
  log_snippet:
    - "Assertion (cellID < (1l << 36)) failed!"
    - "cellID must fit within 36 bits, but is"
    - "get_SIB1_NR() Exiting OAI softmodem: _Assert_Exit_"
  related_config:
    - DU.nr_cellid
  notes: |
    The `nr_cellid` parameter must be a positive integer less than 2^36 (68719476735).

    The current configuration exceeds this limit, which leads to an assertion failure when generating SIB1 during DU initialization.

    âœ… Example of valid values:
    ```c
    nr_cellid = 1;        // valid
    nr_cellid = 68719476734;  // still valid

    // invalid:
    nr_cellid = -1;
    nr_cellid = 0xFFFFFFFFFFFFFFF6;  // too large for 36 bits
    ```

    LLM should ensure that `nr_cellid` is within the range `0 <= nr_cellid < 68719476736`.

    This value is used to compute the NCI (NR Cell Identity), which is part of SIB1 broadcast.


- stage: du_init
  symptom: "DU failed due to logical antenna ports exceeding physical antenna count (nb_tx)"
  log_snippet:
    - "Assertion (num_tx >= config.pdsch_AntennaPorts.XP * config.pdsch_AntennaPorts.N1 * config.pdsch_AntennaPorts.N2) failed!"
    - "Number of logical antenna ports (set in config file with pdsch_AntennaPorts) cannot be larger than physical antennas (nb_tx)"
    - "RCconfig_nr_macrlc() Exiting OAI softmodem: _Assert_Exit_"
  related_config:
    - pdsch_AntennaPorts
    - nb_tx
  notes: |
    This error occurs when the number of logical antenna ports exceeds the available physical transmit antennas (`nb_tx`).
    
    In OpenAirInterface, if `nb_tx` is not explicitly set, it defaults to **1**.
    However, certain antenna configurations may require a higher value.

    - Recommended Action:
      - Set `nb_tx` explicitly in the configuration file
      - Ensure `nb_tx` is set to **at least 1**, or higher if your antenna setup requires it

    - Example:
      If not already defined, add the following to your DU config:
        nb_tx = 1;


- stage: du_init
  type: DU
  symptom: "DU failed due to invalid or missing tracking_area_code"
  log_snippet:
    - "config_check_intrange: tracking_area_code:"
    - "invalid value"
    - "authorized range: 1 65533"
  related_config:
    - tracking_area_code
  notes: |
    The `tracking_area_code` defines the Tracking Area Code (TAC) of the gNB and must be a valid 16-bit integer **between 1 and 65533**.
    
    TAC is used by the 5G Core Network (AMF/MME) to track UE location and determine paging/registration areas. It is part of the **Tracking Area Identity (TAI)** which combines TAC and PLMN (MCC+MNC), and is broadcast in **SIB1** using the following ASN.1 structure:

    - Invalid:
    ```c
    tracking_area_code = 0;       // Reserved and invalid
    tracking_area_code = "0";     // Wrong type (string)
    ```

    - Valid:
    ```c
    tracking_area_code = 1;       // Minimum legal value
    ```

    This value must be present and correctly formatted. Missing or invalid values will cause `config_execcheck()` to exit during DU startup.
    - Replace invalid values (â‰¤0 or â‰¥65534) with a default (e.g., 1)
    - Ensure the parameter exists and is not enclosed in quotes

- stage: du_init
  type: DU
  symptom: "DU crashed due to mismatched nr_cellid with CU"
  log_snippet:
    - "Assertion (du_cell->nr_cellid == cu_cell->nr_cellid) failed!"
    - "CellID mismatch: DU 2147483648 vs CU -2147483648"
    - "f1_setup_response() Exiting OAI softmodem"
  related_config:
    - nr_cellid
  notes: |
    The DU defines `nr_cellid = 2147483648` (0x80000000), which exceeds the signed 32-bit integer range.
    
    When the CU parses this value, it may interpret it as `-2147483648`, causing a mismatch during F1 Setup handling.
    
    This triggers an assertion failure and causes the DU softmodem to crash during initialization.

    -  Fix:
    - Set `nr_cellid` to a safe and valid positive value like:
      ```c
      nr_cellid = 1;
      ```

    - Best Practice:
    - Always ensure both DU and CU explicitly define the same `nr_cellid`.
    - Avoid borderline values like `2147483648` that may cause signed overflow.



